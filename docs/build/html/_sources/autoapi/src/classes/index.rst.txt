:mod:`src.classes`
==================

.. py:module:: src.classes

.. autoapi-nested-parse::

   Container of the used classes of the module.

   ..
       !! processed by numpydoc !!



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   src.classes.curve
   src.classes.curve_product
   src.classes.measure
   src.classes.dual_variable



.. py:class:: curve(*args)

   Piecewise linear continuous curves in the domain Ω.

   To There are two ways to initialize a curve. Either input a single
   numpy.ndarray of size (M,2), representing a set of M spatial points,
   the produced curve will take M uniformly taken time samples.

   Alternative, initialize with two arguments, the first one a one dimentional
   ordered list of time samples of size M, and a numpy.ndarray vector of size
   (M,2) corresponding to the respective spatial points.













   :Attributes:

       **spatial_points** : numpy.ndarray
           (M,2) sized array with ``M`` the number of time samples. Corresponds to
           the position of the curve at each time sample.

       **time_samples** : numpy.ndarray
           (M,) sized array corresponding to each time sample.


   ..
       !! processed by numpydoc !!

   .. method:: __add__(self, curve2)


   .. method:: __sub__(self, curve2)


   .. method:: __mul__(self, factor)


   .. method:: __rmul__(self, factor)


   .. method:: draw(self, tf=1, ax=None, color=[0.0, 0.5, 1.0], plot=True)

      Method to draw the curve.

      Using `matplotlib.collections.LineCollection`, this method draws the
      curve as a collection of segments, whose transparency indicates the
      time of the drawn curve. It also returns the segments and their
      respective colors.

      :Parameters:

          **tf** : float, optional
              value in (0,1] indicating until which time the curve will be drawn.
              Default 1.

          **ax** : matplotlib.axes.Axes, optional
              An axes object to which to include the drawing of the curve.
              Default None

          **color** : list[float], optional
              Length-3 list of the RGB color to give to the curve. Default
              [0.0, 0.5, 1.0]

          **plot** : bool, optional
              Switch to draw or not the curve.

      :Returns:

          **ax** : matplotlib.axes.Axes
              The axes with the drawn curve

          **segments_colors** : (numpy.ndarray, numpy.ndarray)
              A tuple with the segments describing the curve on the first entry,
              and the RGBA colors of them in the second entry













      ..
          !! processed by numpydoc !!


   .. method:: eval(self, t)

      Evaluate the curve at a certain time.


      :Parameters:

          **t** : list[float] or float
              time values in ``[0,1]``.

      :Returns:

          **positions** : numpy.ndarray
              (N,2) sized array representing ``N`` different points in ``R^2``.
              ``N`` corresponds to the number of input times.













      ..
          !! processed by numpydoc !!


   .. method:: eval_discrete(self, t)

      Evaluate the curve at a certain time node.


      :Parameters:

          **t** : int
              The selected time sample, in 0,1,...,T, with T the number of
              time samples of the considered problem.

      :Returns:

          numpy.ndarray
              A single spatial point represented by a (1,2) array.













      ..
          !! processed by numpydoc !!


   .. method:: integrate_against(self, w_t)

      Method to integrate a dual variable along this curve.


      :Parameters:

          **w_t** : :py:class:`src.classes.dual_variable`
              The dual variable to integrate against

      :Returns:

          float
              The integral of w_t along the curve.













      ..
          !! processed by numpydoc !!


   .. method:: H1_seminorm(self)

      Computes the ``H^1`` seminorm of the curve



      :Returns:

          float
              ..













      ..
          !! processed by numpydoc !!


   .. method:: L2_norm(self)

      Computes the ``L^2`` norm of the curve



      :Returns:

          float
              ..













      ..
          !! processed by numpydoc !!


   .. method:: H1_norm(self)

      Computes the ``H^1`` norm of this curve.



      :Returns:

          float
              ..













      ..
          !! processed by numpydoc !!


   .. method:: energy(self)

      Computes the Benamou-Brenier with Total variation energy.

      It considers the regularization parameters α and β that should have
      been already input to the solver.


      :Returns:

          float
              ..








      .. rubric:: Notes

      This value is obtained via

      .. math::
          \frac{\beta}{2} \int_0^1 ||\dot \gamma(t)||^2 dt + \alpha

      with :math:`\gamma` the curve instance executing this method,
      and :math:`\alpha, \beta` the constants defining the inverse problem
      (input via :py:meth:`src.DGCG,set_model_parameters` and stored in
      :py:data:`src.config.alpha`, :py:data:`src.config.beta`.





      ..
          !! processed by numpydoc !!


   .. method:: set_times(self, new_times)

      Method to change the ``time_samples`` member,

      It changes the vector of time samples by adjusting accordingly the
      ``spatial_points`` member,

      :Parameters:

          **new_times** : numpy.ndarray
              1 dimensional array with new times to have the curve defined in.

      :Returns:

          None
              ..













      ..
          !! processed by numpydoc !!



.. py:class:: curve_product(curve_list=None, weights=None)

   Elements of a weighted product space of curve type objects.

   It can be initialized with empty arguments, or via the keyworded arguments
   `curve_list` and `weights`.













   :Attributes:

       **weights** : list[float]
           Positive weights associated to each space.

       **curves** : list[:py:class:`src.classes.curve`]
           List of curves


   ..
       !! processed by numpydoc !!

   .. method:: __add__(self, curve_list2)


   .. method:: __sub__(self, curve_list2)


   .. method:: __mul__(self, factor)


   .. method:: __rmul__(self, factor)


   .. method:: H1_norm(self)

      Computes the considered weighted product :math:`H^1` norm.



      :Returns:

          float
              ..








      .. rubric:: Notes

      If we have a product of :math:`M` curve spaces :math:`H^1` with weights
      :math:`w_1, w_2, ... w_M`, then an element of this space is
      :math:`\gamma = (\gamma_1,...,\gamma_M)` and has a norm
      :math:`||\gamma|| = \sum_{j=1}^M \frac{w_j}{M} ||\gamma_j||_{H^1}`





      ..
          !! processed by numpydoc !!


   .. method:: to_measure(self)

      Cast this objet into :py:class:`src.classes.measure` 
















      ..
          !! processed by numpydoc !!



.. py:class:: measure

   Sparse dynamic measures composed of a finite weighted sum of Atoms.

   Initializes with empty arguments to create the zero measure.
   Internally, a measure will be represented by curves and weights.










   .. rubric:: Notes

   As described in the theory/paper, an atom is a tuple

   .. math::
       \mu_\gamma = (\rho_\gamma, m_\gamma)

   Where the first element is defined as the measure

   .. math:: 
       \rho_\gamma = a_\gamma dt \otimes \delta_{\gamma(t)}
                     = \frac{1}{\frac{\beta}{2}
                       \int_0^1 || \dot \gamma(t) ||^2 dt + \alpha}
                       dt \otimes \delta_{\gamma(t)}

   That is in a Dirac delta transported along a curve and normalized by
   :math:`a_\gamma`, its Benamou-Brenier energy.

   The second member of the pair :math:`m_\gamma` is the momentum and it is
   irrelevant for numerical computations so we will not describe it.



   :Attributes:

       **curves** : list[:py:class:`src.classes.curve`]
           List of member curves.

       **weights** : numpy.ndarray
           Array of positive weights associated to each curve.


   ..
       !! processed by numpydoc !!

   .. method:: add(self, new_curve, new_weight)

      Include a new curve with associated weight into the measure.


      :Parameters:

          **new_curve** : :py:class:`src.classes.curve`
              Curve to be added.

          **new_weight** : float
              Positive weight to be added.

      :Returns:

          None
              ..













      ..
          !! processed by numpydoc !!


   .. method:: __add__(self, measure2)


   .. method:: __mul__(self, factor)


   .. method:: __rmul__(self, factor)


   .. method:: modify_weight(self, curve_index, new_weight)

      Modifies the weight of a particular Atom/curve


      :Parameters:

          **curve_index** : int
              Index of the target curve stored in the measure.

          **new_weight** : float
              Positive new weight.

      :Returns:

          None
              ..













      ..
          !! processed by numpydoc !!


   .. method:: integrate_against(self, w_t)

      Integrates the measure against a dual variable.


      :Parameters:

          **w_t** : :py:class:`src.classes.dual_variable`
              ..

      :Returns:

          float
              ..













      ..
          !! processed by numpydoc !!


   .. method:: spatial_integrate(self, t, target)

      Spatially integrates the measure against a function for fixed time.


      :Parameters:

          **t** : int
              Index of time sample in 0,1,...,T. Where (T+1) is the total number
              of time samples of the inverse problem.

          **target** : callable[numpy.ndarray, float]
              A function that takes values on the 2-dimensional domain and
              returns a real number.

      :Returns:

          float
              ..













      ..
          !! processed by numpydoc !!


   .. method:: to_curve_product(self)

      Casts the measure into a :py:class:`src.classes.curve_product`.



      :Returns:

          None
              ..













      ..
          !! processed by numpydoc !!


   .. method:: get_main_energy(self)

      Computes the Tikhonov energy of the Measure.

      This energy is the main one the solver seeks to minimize.


      :Returns:

          float
              ..








      .. rubric:: Notes

      The Tikhonov energy for a dynamic sparse measure :math:`\mu` is
      obtained via

      .. math::
          \sum_{t=0}^T || K_t^* \mu - f_t||_{H_t} + \sum_j w_j

      Where :math:`K_t^*` is the input forward operator
      :py:meth:`src.operators.K_t_star`, :math:`f_t` is the input
      data to the problem, and :math:`w_j` are the weights of the
      atoms in the sparse dynamic measure.





      ..
          !! processed by numpydoc !!


   .. method:: draw(self, ax=None)

      Draws the measure.


      :Parameters:

          **ax** : matplotlib.axes.Axes, optional
              axes to include the drawing. Defaults to None.

      :Returns:

          matplotlib.axes.Axes
              The modified, or new, axis with the drawing.













      ..
          !! processed by numpydoc !!


   .. method:: animate(self, filename=None, show=True, block=False)

      Method to create an animation representing the measure object.

      Uses ``matplotlib.animation.FuncAnimation`` to create a video
      representing the measure object, where each curve, and its respective
      intensity is represented. The curves are ploted on time, and the color
      of the curve represents the respective intensity.  It is possible to
      output the animation to a ``.mp4`` file if ``ffmpeg`` is available.

      :Parameters:

          **filename** : str, optional
              A string to save the animation as ``.mp4`` file. Default None
              (no video is saved).

          **show** : bool, optional
              Switch to indicate if the animation should be immediately shown.
              Default True.

          **frames** : int, optional
              Number of frames considered in the animation. Default 51.

      :Returns:

          None
              ..













      ..
          !! processed by numpydoc !!


   .. method:: reorder(self)

      Reorders the curves and weights of the measure.

      Reorders the elements such that they have increasing intensity.
      The intensity is defined as ``intensity = weight/energy``


      :Returns:

          None
              ..













      ..
          !! processed by numpydoc !!



.. py:class:: dual_variable(rho_t)

   Dual variable class.

   The dual variable is obtained from both the current iterate and the
   problem's input data. The data can be fetched from ``config.f_t``.

   To initialize, call dual_variable(current_measure) with ``current_measure``
   a :py:class:`src.classes.measure`.















   ..
       !! processed by numpydoc !!

   .. method:: eval(self, t, x)

      Evaluate the dual variable in a time and space


      :Parameters:

          **t** : int
              Time sample index, takes values in 0,1,...,T. With (T+1) the total
              number of time samples of the inverse problem.

          **x** : numpy.ndarray
              ..

          **(N,2) sized array representing ``N`` spatial points of the domain Ω.**
              ..

      :Returns:

          numpy.ndarray
              (N,1) sized array, corresponding to the evaluations in the N given
              points at a fixed time.













      ..
          !! processed by numpydoc !!


   .. method:: grad_eval(self, t, x)

      Evaluate the gradient of the dual variable in a time and space


      :Parameters:

          **t** : int
              Time sample index, takes values in 0,1,...,T. With (T+1) the total
              number of time samples of the inverse problem.

          **x** : numpy.ndarray
              ..

          **(N,2) sized array representing ``N`` spatial points of the domain Ω.**
              ..

      :Returns:

          numpy.ndarray
              (2,N,1) sized array, corresponding to the evaluations in the N
              given points at a fixed time, and the first coordinate indicating
              the partial derivatives.













      ..
          !! processed by numpydoc !!


   .. method:: animate(self, measure=None, resolution=0.01, filename=None, show=True, block=False)

      Animate the dual variable.

      This function uses matplotlib.animation.FuncAnimation to create an
      animation representing the dual variable. Since the dual variable
      is a continuous function in Ω, it can be represented by evaluating
      it in some grid and plotting this in time.
      This method also supports a measure class input, to be overlayed on top
      of this animation. This option is helpful if one wants to see the
      current iterate :math:`\mu^n` overlayed on its dual variable,
      the solution curve of the insertion step or, at the first iteration,
      the backprojection of the data with the ground truth overlayed.

      :Parameters:

          **measure** : :py:class:`src.classes.measure`, optional
              Measure to be overlayed into the animation. Defaults to None.

          **resolution** : float, optional
              Resolution of the grid in which the dual variable would be
              evaluated. Defaults to 0.01.

          **filename** : str, optional
              If given, will save the output to a file <filename>.mp4.
              Defaults to None.

          **show** : bool, default True
              Switch to indicate if the animation should be shown.

          **block** : bool, default False
              Switch to indicate if the animation should pause the execution.
              Defaults to False.

      :Returns:

          matplotlib.animation.FuncAnimation
              ..








      .. rubric:: Notes

      The method returns a FuncAnimation object because it is
      required by matplotlib, else the garbage collector will eat it up and
      no animation would display. Reference:
      https://stackoverflow.com/questions/48188615/funcanimation-doesnt-show-outside-of-function





      ..
          !! processed by numpydoc !!


   .. method:: grid_evaluate(self, t, resolution=0.01)

      Evaluates the dual variable in a spatial grid for a fixed time.

      The grid is uniform in [0,1]x[0,1]

      :Parameters:

          **t** : int
              Index of time sample, takes values in 0,1,...,T. Where (T+1) is the
              total number of time samples of the inverse problem.

          **resolution** : float, optional
              Resolution of the spatial grid. Defaults to 0.01

      :Returns:

          **evaluations** : numpy.ndarray
              Square float array of evaluations.

          **maximum_at_t** : float
              Maximum value of the dual variable in this grid at time t.













      ..
          !! processed by numpydoc !!


   .. method:: get_sum_maxs(self)

      Output the sum of the maxima of the dual variable at each time.

      This quantity is useful to discard random curves that have too high
      initial-speed/Benamou-Brenier energy.


      :Returns:

          float
              ..













      ..
          !! processed by numpydoc !!


   .. method:: _density_transformation(self, x)

      The function that is applied to use the dual variable as density.
















      ..
          !! processed by numpydoc !!


   .. method:: as_density_get_params(self, t)

      Return the parameters to use the dual variable as density.

      This method is useful for the rejection sampling algorithm. See
      :py:meth:`src.insertion_mod.rejection_sampling`.

      :Parameters:

          **t** : int
              Index of the time samples, with values in 0,1,...,T. Where (T+1)
              is the total number of time samples of the inverse problem.

      :Returns:

          **density_support** : float
              Proportion of the sampled pixels where the density is non-zero
              at the given time t.

          **density_max** : float
              Maximum value of the density at the given time t.













      ..
          !! processed by numpydoc !!


   .. method:: as_density_eval(self, t, x)

      Evaluate the density obtained from the dual variable.


      :Parameters:

          **t** : int
              Index of the time samples, with vales in 0,1,...,T. With (T+1) the
              total number of time samples of the inverse problem.

          **x** : numpy.ndarray
              (1,2) array of floats representing a point in the domain Ω.

      :Returns:

          float
              ..













      ..
          !! processed by numpydoc !!



